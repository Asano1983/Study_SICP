整数計画ソルバーの利用

近年、分枝カット法を探索の基本戦略とする整数計画ソルバー（整数計画問題を解くソフトウェア）
の進歩は著しく、実務に現れる大規模な整数計画問題が次々と解かれている。
現在では、商用・非商用を含めて多くの整数計画ソルバーが公開されており、
整数計画ソルバーは現実問題を解決するための有用な道具として、
数理最適化以外の分野でも急速に普及している。

4.2.2節で紹介したように、整数計画問題を含む多くの組合せ最適化問題はNP困難のクラスに属する
ことが計算の複雑さの理論により知られている。
しかし、計算の複雑さの理論が示す結果の多くは「最悪の場合」であり、
多くの問題例では現実的な計算手間で最適解を求めることができる場合は少なくない。

また、整数計画ソルバーは探索中に得られた暫定解を保持しているため、
与えられた計算時間内に最適解を求められなくても、質の高い実行可能解が求まれば十分に満足できる事例も多く、
整数計画ソルバーはそのような目的にも使われる。

商用の整数計画ソルバーを利用するためにはライセンス料が必要となるが、
無償の試用ライセンスや教育研究の利用に限定した安価なアカデミックライセンスが提供されている場合も少なくない。
一般的に、非商用より商用の整数計画ソルバーの方が性能が高いが、
実際には、商用の整数計画ソルバーの中でもかなりの性能差がある。

整数計画ソルバーを選ぶ際には、性能以外にも、あつかえる整数計画問題の種類、整数計画問題の記述形式、
インターフェイスなども考慮して、各自の目的に合った整数計画ソルバーを選ぶことが望ましい。

まず、整数計画ソルバーを用いて以下の整数計画問題を解くことを考える。

（作成中）

整数計画ソルバーの主な利用方法は以下のとおりである。

（１）コマンドラインインターフェイスを通じて整数計画ソルバーを実行する方法。
（２）最適化モデリングツールを通じて整数計画ソルバーを実行する方法。
（３）プログラミング言語のライブラリやソフトウェアのプラグインを通じて整数計画ソルバーを実行する方法。

1番目は、LP形式、MPS形式などで整数計画問題を表し、整数計画ソルバーを実行する方法である。
LP形式による整数計画問題の記述例を図4.75に示す。
目的関数や制約条件の部分は、数式をほぼそのまま表しているだけである。

maximize, subject to, bounds, general, endは予約語で、これらの予約後の後に続けて、
目的関数、制約条件、変数がとる値の範囲、整数制約の有無などを記述する、
LP形式は文法が平易で可読性が高く、多くの整数計画ソルバーが対応している。

MPS形式による整数計画問題の記述例を図4.76に示す。
MPS形式は1960年代にIBMにより導入された形式で、現在も標準的に使われているが可読性は低い。

LP形式やMPS形式はプログラミング言語のように変数をまとめて表せない。
たとえば、LP形式で$\sum_{j=1}^100 x_j \le 3$を喜寿するには、
`x1 + x2 + ... + x100 <= 3`
と書くしか方法がない。
したがって、大規模な問題例では、与えられた入力データをLP形式やMPS形式に変換するプログラムを作成する必要がある。

2番目は、最適化モデリングツールが提供するモデリング言語で整数計画問題を表し、
最適化モデリングツールを通じて整数計画ソルバーを実行する方法である。
モデリング言語による整数計画問題の記述例を図4.77に示す。

モデリング言語では、モデルとデータを分離して記述できるため、数式を容易にモデルに書き換えられる。
たとえば、$\sum_{j=1}^n a_{ij}x_j \le b_i$の数式は、
`sum{j in 1..n} a[i,j] * x[j] <= b[i]`
と書ける。
現実問題を整数計画問題に定式化できれば、
すぐに整数計画ソルバーを利用できるので効率的なプロトタイピングが可能となる。
一方で、最適化モデリングツールによりモデリング言語の仕様が異なるため、1番目の方法に比べると汎用性に欠ける。

3番目は、整数計画ソルバーが提供するプログラミング言語のライブラリやソフトウェアのプラグインを通じて
整数計画ソルバーを実行する方法である。
部分問題を解くためのサブルーチンとして整数計画ソルバーを利用する場合や、
整数計画ソルバーの挙動を細かく制御したい場合などは、
この方法が効率的である。
ただし、整数計画ソルバーやそのバージョンによりライブラリやプラグインの仕様が異なるため汎用性と保守性に欠ける。

整数計画ソルバーは解候補を体系的に列挙する分枝カット法を探索の基本戦略とするため、
最適解を効率的に求めることができる大規模な問題例がある一方で、
いつまで待っても最適解を求められない小規模な問題例があり、変数や制約条件の数だけでは整数計画ソルバーの計算時間を見積もれないことが知られている。
分枝カット法は、整数計画問題を小規模な子問題に分割しつつ、各子問題では、暫定解から得られる最適解の下界（最小化問題であれば上界）と、線形計画緩和問題から得られる最適値の上界（最小化問題であれば下界）
を利用した限定操作により無駄な探索を省いている。
そのため、いつまで待っても整数計画ソルバーの計算が終了しないならば、

（１）線形計画緩和問題の求解に多大な計算時間を要する
（２）限定操作が効果的に働いていない

などが原因として考えられる。
もちろん、整数計画ソルバーは分枝カット法以外にも多くのアルゴリズムを内包しているため、
これだけが原因であると決めつけるべきではないが、対策を練る上でまず始めに確認すべきことである。

（１）については、整数計画問題から各変数の整数制約を取り除いた整数計画問題を整数計画ソルバーで解けば計算時間を見積もることができる。
実際には、整数計画ソルバーは双対単体法（2.3.4節）を用いた再最適化により計算を効率化するため、
整数計画問題の子問題において線形計画緩和問題の求解に要する計算時間はさらに短くなる。
しかし、この方法で線形計画問題を1回解くのに要する計算時間が長いようであれば、与えられた問題例の規模が整数計画ソルバーで解くには大きすぎると判断するのが妥当であろう。

（２）については、限定操作が効率的に働いていない原因として、

（ｉ）暫定解から得られる最適化の下界（最小化問題であれば上界）が悪い。
（ｉｉ）線形計画緩和問題の最適解から得られる最適解の上界（最小化問題であれば下界）が悪い
（ｉｉｉ）多数の最適解が存在する

などが考えられる（ｉとｉｉの区別は容易ではない）。

（ｉ）は実行可能解が非常に少ないことが原因として考えられる。
優先度の低い制約条件を緩和する方法がある。
また、利用者が持つ先験的な知識を利用して、初期の暫定解とする方法もある。

（ｉｉ）については、図4.78のように、整数計画問題として同じであっても、線形計画緩和問題としては異なる定式化が複数存在することがある。
一般には、安易に制約条件を減らすべきではない。
制約条件の少ない定式化の方が見栄えはよいかもしれないが、制約条件が多い方が良い上界（最小化問題であれば下界）が得られることが期待できる。
また、多くの整数計画ソルバーは冗長な制約条件を前処理で取り除く。

（ｉｉｉ）については、最適値の上界と下界の差が小さいにもかかわらず、いつまで待っても整数計画ソルバーの計算が終了しないならば、
整数計画問題が多数の最適解を持っている可能性がある。
このような場合は、目的関数や制約条件を変更して最適解の数を減らす方法がある（例えば、ビンパッキング問題において、添字の数字が小さい箱から順に使用するという制約条件を追加するなど）。

いつまで待っても整数計画ソルバーの計算が終了しない場合には、最適解を求めることをあきらめるのも1つの手である。
整数計画ソルバーは探索中に得られた暫定解を保持しているため、
与えられた計算時間内に最適解を求められなくても質の高い実行可能解を求められれば十分に満足できる場合も多い。

また、整数計画ソルバーは発見的解法としても高性能であり、メタヒューリスティック（4.7節）などの発見的解法を利用もしくは開発する前に、
整数計画ソルバーを適用して、質の高い実行可能解を求められるかどうか確認すべきである。


＜線形計画ソルバー＞

- CBC（無料）
- SCIP（無料？）
- Gurobi（有料）
- CPLEX（有料）
- XPRESS（有料）

基本的に有料（商用）の方が速い（10倍～30倍とか違う）。
年々進化していて、バージョンによる差異も結構ある。

https://www.scipopt.org/
によると2022/11/04から商用利用も無料となったらしい（学術目的は従来から無料）。

04/Nov/2022	SCIP license update
Starting with the next release SCIP will be licensed under the Apache 2.0 License.

＜Python API＞

PythonではPuLPやPython-MIPが有名。
内部のソルバーはデフォルトではCBC（無料）。
ソルバーにCBCを使うならばPuLPよりもPython-MIPの方が使い勝手が良いらしいが、
SCIPはPuLPしか対応していないらしい（Python-MIPはダメらしい）。

PuLPやPython-MIPのソルバーとしてGurobi（有料）を使うこともできるが、GurobiはもともとPython API（gurobipy）を持っている。
Gurobi（有料）が利用できる場合はgurobipyの方が良いらしい（ライセンスは100万円以上すると思うけど）。

PuLPについては、「Pythonではじめる数理最適化」などを読むのもよいかもしれない（演者は読んでいない）。


＜ニューラルネットワーク＞

混合整数計画法をニューラルネットワークで解くものもあるらしい。
問題によってはSCIPより速いこともあるとか（わざとSCIPが苦手な問題を選んでる可能性もある？）。












